using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using Prijava;

namespace UnitTestProject1
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void Test1()
        {
            Autentifikator autentifikator = new Autentifikator();
            autentifikator.PrijaviKorisnika("mmijac", "abcde");
            var k = autentifikator.PrijavljeniKorisnik;
            Assert.IsNotNull(k);
            Assert.IsTrue(k.KorisnickoIme == "mmijac");
        }
        [TestMethod]
        public void Test2()
        {
            Autentifikator autentifikator = new Autentifikator();
            autentifikator.PrijaviKorisnika("", "");
            var k = autentifikator.PrijavljeniKorisnik;
            Assert.IsNotNull(k);
            Assert.IsTrue(k.Tip == TipKorisnika.Gost);
        }
        [TestMethod]
        public void Test3()
        {
            Autentifikator autentifikator = new Autentifikator();
            
            Assert.ThrowsException<FailedAuthenticationException>(() => { autentifikator.PrijaviKorisnika("mmijac", "zbde"); });
        }
        [TestMethod]
        public void Test4()
        {
            Autentifikator autentifikator = new Autentifikator();
            autentifikator.PrijaviKorisnika("mmijac", "abcde");
            autentifikator.OdjaviKorisnika();
            var korisnik = autentifikator.PrijavljeniKorisnik;
            Assert.IsNull(korisnik);
        }
        [TestMethod]
        public void Test5()
        {
            Autentifikator autentifikator = new Autentifikator();
            autentifikator.PrijaviKorisnika("mmijac", "abcde");
      
            Assert.ThrowsException<InvalidOperationException>(() => { autentifikator.PrijaviKorisnika("anovak", "qetzs"); });
        }
        [TestMethod]
        public void Test6()
        {
            Autentifikator autentifikator = new Autentifikator();
            autentifikator.PrijaviKorisnika();
            var k = autentifikator.PrijavljeniKorisnik;
            Assert.IsNotNull(k);
            Assert.IsTrue(k.Tip == TipKorisnika.Gost);
        }
        [TestMethod]
        public void Test7()
        {
            Autentifikator autentifikator = new Autentifikator();

            Assert.ThrowsException<InvalidOperationException>(() => { autentifikator.OdjaviKorisnika(); });
        }
        [TestMethod]
        public void Test8()
        {
            Autentifikator autentifikator = new Autentifikator();
            autentifikator.PrijaviKorisnika("anovak","qetzs");
           
            Assert.ThrowsException<InvalidOperationException>(() => { autentifikator.DektivirajKorisnika("gtudor"); });
        }
        [TestMethod]
        public void Test9()
        {
            Autentifikator autentifikator = new Autentifikator();
            autentifikator.PrijaviKorisnika("mmijac", "abcde");
            autentifikator.DektivirajKorisnika("pivic");
            autentifikator.OdjaviKorisnika();
           
            Assert.ThrowsException<UserDeactivatedException>(() => { autentifikator.PrijaviKorisnika("pivic", "12345"); });
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Prijava
{
    public class FailedAuthenticationException : ApplicationException
    {
        public FailedAuthenticationException(string message)
            :base(message)
        {

        }
    }

    public class UserDeactivatedException : ApplicationException
    {
        public UserDeactivatedException(string message) : base(message)
        {

        }
    }

    public class Autentifikator
    {
        private List<Korisnik> Korisnici { get; set; }
        public Korisnik PrijavljeniKorisnik { get; private set; }

        public Autentifikator()
        {
            Korisnici = new List<Korisnik>();

            Korisnici.Add(new Korisnik { KorisnickoIme = "mmijac", Lozinka="abcde", Tip = TipKorisnika.Administrator });
            Korisnici.Add(new Korisnik { KorisnickoIme = "pivic", Lozinka = "12345", Tip = TipKorisnika.Obicni });
            Korisnici.Add(new Korisnik { KorisnickoIme = "valic", Lozinka = "ab234", Tip = TipKorisnika.Obicni });
            Korisnici.Add(new Korisnik { KorisnickoIme = "anovak", Lozinka = "qetzs", Tip = TipKorisnika.Obicni });
            Korisnici.Add(new Korisnik { KorisnickoIme = "thorvat", Lozinka = "hfdrz", Tip = TipKorisnika.Obicni });
            Korisnici.Add(new Korisnik { KorisnickoIme = "gtudor", Lozinka = "nrtgs", Tip = TipKorisnika.Obicni });
            Korisnici.Add(new Korisnik { KorisnickoIme = "btomas", Lozinka = "kgdrt", Tip = TipKorisnika.Administrator });
            Korisnici.Add(new Korisnik { KorisnickoIme = "gost", Lozinka = "gost", Tip = TipKorisnika.Gost });
        }

        public void PrijaviKorisnika(string korisnickoIme, string lozinka)
        {
            if(PrijavljeniKorisnik != null)
            {
                throw new InvalidOperationException();
            }
            if (korisnickoIme != "" && lozinka != "")
            {
                PrijavljeniKorisnik = Korisnici.FirstOrDefault(k => k.KorisnickoIme == korisnickoIme && k.Lozinka == lozinka);
                if (PrijavljeniKorisnik == null)
                {
                    throw new FailedAuthenticationException("Neispravni podaci!");
                }
                if (!PrijavljeniKorisnik.Active)
                {
                    throw new UserDeactivatedException("Korisnik je deaktiviran!");
                }
            }
            if(korisnickoIme=="" && lozinka == "")
            {
                PrijaviKorisnika("gost", "gost");

            }
            
        }

        public void PrijaviKorisnika()
        {
            PrijaviKorisnika("gost", "gost");
        }

        public void OdjaviKorisnika()
        {
            if (PrijavljeniKorisnik != null)
            {
                PrijavljeniKorisnik = null;
            }
            else
            {
                throw new InvalidOperationException("Odjava je moguÄ‡a samo ukoliko je korisnik prijavljen!");
            }
        }

        public void DektivirajKorisnika(string korisnickoIme)
        {
            if (PrijavljeniKorisnik == null || PrijavljeniKorisnik.Tip != TipKorisnika.Administrator)
            {
                throw new InvalidOperationException();
            }

            var korisnik = Korisnici.FirstOrDefault(k => k.KorisnickoIme == korisnickoIme);
            if (korisnik != null)
            {
                korisnik.Active = false;
            }
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Prijava
{
    public enum TipKorisnika
    {
        Obicni,
        Gost,
        Administrator
    }

    public class Korisnik
    {
        public string KorisnickoIme { get; set; }
        public string Lozinka { get; set; }

        public TipKorisnika Tip { get; set; }
        public bool Active { get; set; } = true;

    }
}
